<div class="tab-pane" id="plan_fact">
  <div class="panel panel-default" style="margin-top: 20px">
    <div class="panel-heading">Список вопросов, на которые отвечает график</div>
    <div class="panel-body">
      <ul>
        <li>Сколько и каких квартир (комнатность) планировали продать на прошлых/текущей неделе и сколько продали по всем объектам/по каждому объекту в штуках/м2/финансах?</li>
      </ul>
    </div>
  </div>
  <div class="col-sm-12" style="margin-top: 20px">
    <div class="col-sm-4 ">
      <div class="btn-group" data-toggle="buttons" id="value_filter_planFact">
        <label label-default="" id="in-pcs" class="btn btn-default active" data="pcs" data-label="Количество квартир">
          <input name="options"  type="radio" checked="checked">В квартирах
        </label>
        <label label-default=""  id="in-m2" class="btn btn-default" data="m2" data-label="Кв метров">
          <input name="options"  type="radio">В м<sup>2</sup>
        </label>
        <label label-default="" id="in-fin" class="btn btn-default " data="fin" data-label="Рублей">
          <input name="options"  type="radio">В финанасах
        </label>
      </div>
    </div>
    <div class="col-sm-6">
      <div class="btn-group" data-toggle="buttons" id="interval_choosen">
        <label label-default="" id="in-pcs" class="btn btn-default active" data="week">
          <input name="options"  type="radio" checked="checked">Неделя
        </label>
        <label label-default=""  id="in-m2" class="btn btn-default" data="month">
          <input name="options"  type="radio">Месяц
        </label>
        <label label-default=""  id="in-m2" class="btn btn-default" data="qartal">
          <input name="options"  type="radio">Квартал
        </label>
        <label label-default="" id="in-fin" class="btn btn-default " data="half_year">
          <input name="options"  type="radio">Полугодие
        </label>
        <label label-default="" id="in-fin" class="btn btn-default " data="year">
          <input name="options"  type="radio">Год
        </label>
      </div>
    </div>

    <%= render "apartment/charts/commons_part/rooms_filter" %>
  </div>
  <div class="row">
    <div id="apartment-plan-fact" class ="chart" style="height: 500px; width: 900px;"></div>
  </div>
  <script type="application/javascript">
      $(function () {
          var months = ["", "Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"];
          var active_measure = 'pcs';
          var active_title = 'Количество';

          var AxisFormatters = {
              pcs: function(value){return value+''},
              m2: function(value){return value+' кв.м.'},
              fin: function(value){return value/1000000+' млн. ₽'}
          }

          var DatalabelsFormatters = {
              pcs: function(value){return value+''},
              m2: function(value){return thousands_sep(value.toFixed(0))+''},
              fin: function(value){return thousands_sep((value/1000000).toFixed(3))+''}
          }

          var TooltipFormatters = {
              pcs: function(value){return value+' квартир'},
              m2: function(value){return thousands_sep(value.toFixed(0))+' кв.м.'},
              fin: function(value){return thousands_sep((value/1000000).toFixed(3))+' млн. ₽'}
          }


          setNewValuesForPlanFact = function () {
              active_measure =  $(this).parent().attr("data");
              active_title = $(this).parent().attr("data-label");
              redrawPlanFactChart();
          }

          interval = 'week';
          setNewInterval = function (){
              interval = $(this).parent().attr("data");
              redrawPlanFactChart();
          }


          $('#interval_choosen input').change(setNewInterval);

          getIntervalStarts= function (){
              res = []
              for (var i=4; i>=0; i--)
              {
                  var start;
                  var end;
                  switch (interval) {
                      case 'week':
                          start = moment().subtract(i, 'week').startOf('isoweek');
                          end = moment().subtract(i-1, 'week').startOf('isoweek');
                          break;
                      case 'month':
                          start = moment().subtract(i, 'month').startOf('month');
                          end = moment().subtract(i-1, 'month').startOf('month');
                          break;
                      case 'qartal':
                          start = moment().subtract(i*3, 'month').startOf('quarter');
                          end = moment().subtract((i-1)*3, 'month').startOf('quarter');
                          break;
                      case 'half_year':
                          start_of_current_quarter =
                                  (moment().quarter()%2==1) ?
                                          moment().startOf('quarter') :
                                          moment().add(3, 'month').startOf('quarter') ;
                          end_of_current_quarter =
                                  (moment().quarter()%2==0) ?
                                     moment().endOf('quarter') :
                                    moment().subtract(3, 'month').endOf('quarter') ;

                          start = start_of_current_quarter.subtract((i+1)*6, 'month');
                          end = end_of_current_quarter.subtract((i)*6, 'month');
                          break;
                      case 'year':
                          start = moment().subtract(i, 'year').startOf('year');
                          end = moment().subtract(i-1, 'year').startOf('year');
                          break;
                      default:
                          start = moment().subtract(i, 'week').startOf('isoweek');
                          end = moment().subtract(i-1, 'week').startOf('isoweek');
                          break;
                  }
                  res.push({start: start, end: end})
              }
              console.log('intervals', res);
              return res;
          }

          getIntervalCategories = function (){

                  res = []
                  for (var i=4; i>=0; i--)
                  {
                      var start;

                      switch (interval) {
                          case 'week':
                              start = moment().subtract(i, 'week').startOf('isoweek')
                              var end = moment().subtract(i, 'week').endOf('isoweek')
                              res.push(start.format("DD.MM")+"-"+end.format("DD.MM"))
                              break;
                          case 'month':
                              res.push (months[moment().subtract(i, 'month').get('month')+1])
                              break;
                          case 'qartal':
                              res.push(moment().subtract(i*3, 'month').format("Q/YYYY"));
                              break;
                          case 'half_year':
                              start_of_current_quarter =
                                      (moment().quarter()%2==1) ?
                                              moment().startOf('quarter') :
                                              moment().add(3, 'month').startOf('quarter') ;
                              end_of_current_quarter =
                                      (moment().quarter()%2==0) ?
                                              moment().endOf('quarter') :
                                              moment().subtract(3, 'month').endOf('quarter') ;

                              start = start_of_current_quarter.subtract((i+1)*6, 'month');
                              end = end_of_current_quarter.subtract((i)*6, 'month');
                              res.push((months[start.month()+1])+"/"+start.format('YY')+"-"+months[end.month()+1]+"/"+end.format('YY'))
                              break;
                          case 'year':
                              res.push(moment().subtract(i, 'year').format("YYYY"));
                              break;
                          default:
                              start = moment().subtract(i, 'week').startOf('isoweek')
                              var end = moment().subtract(i, 'week').endOf('isoweek')
                              res.push(start.format("DD.MM")+"-"+end.format("DD.MM"))
                              break;
                      }

                  }
                  return res;

          }


          $('#value_filter_planFact input').change(setNewValuesForPlanFact);
          plan_fact_chart = new  Highcharts.Chart({
              credits:  {
                  enabled: false
              },
              chart: {
                  type: 'column',
                  renderTo: 'apartment-plan-fact'
              },
              title: {
                  text: 'План выполнения продаж'
              },
              xAxis: {
                  categories: getIntervalCategories()
              },
              yAxis: {
                  //min: 0,
                  allowDecimals: false,
                  title: {
                      text: active_title
                  },
                  labels:{
                      formatter: function(){return AxisFormatters[active_measure](this.value);}
                  }
              },
              tooltip: {
                  shared: true,
                  useHTML: true,
                  formatter: function() {
                      var result = '<b>' + this.x + '</b>';
                      $.each(this.points, function(i, datum) {

                              result += '<br /> <i style="color: '+datum.point.series.color+'">'
                                      + datum.series.name + '</i>: '
                                      + TooltipFormatters[active_measure](datum.y);

                      });
                      return result;
                  }
              },
              plotOptions: {
                  column: {
                      pointPadding: .1,
                      borderWidth: 0,
                      dataLabels: {
                          enabled: true,
                          formatter: function () {return DatalabelsFormatters[active_measure](this.y)}
                      }
                  }

              },
              series: [{
                  name: 'Планировалось заключить ДКП ',
                  data: []

              }, {
                  name: 'Фактически заключено ДКП',
                  data: []

              }]
          });

          redrawPlanFactChart = function (){
              var data = getDataForPlanFactChart();
              plan_fact_chart.xAxis[0].setCategories(getIntervalCategories(),false);
              plan_fact_chart.yAxis[0].setTitle({text: active_title})
              plan_fact_chart.series[0].setData(data[active_measure]['plan'],false);
              plan_fact_chart.series[1].setData(data[active_measure]['fact'],false);
              plan_fact_chart.redraw();
          }

          getDataForPlanFactChart= function(){
              weeks_group_plan = []
              weeks_group_fact = []

              var intervals =  getIntervalStarts()
              $.each(filtered_apartments, function(i,val){
                  apart_date_fact = moment(val.dkp_date)
                  apart_date_plan = moment(val.sale_plan_date)

                  $.each(intervals, function(t,week){
                      if(weeks_group_fact[t]==null) weeks_group_fact[t]=[]
                      if (apart_date_fact.diff(week.start, 'days')>=0 && apart_date_fact.diff(week.end, 'days')<0)
                      {
                          weeks_group_fact[t].push(val)
                      }
                      if(weeks_group_plan[t]==null) weeks_group_plan[t]=[]
                      if (apart_date_plan.diff(week.start, 'days')>=0 && apart_date_plan.diff(week.end, 'days')<0)
                      {
                          weeks_group_plan[t].push(val)
                      }
                  })
              })

              series =  {'m2': {plan:[],fact:[]}, 'fin': {plan:[],fact:[]}, 'pcs':{plan:[],fact:[]}};

              series['m2']['plan'] = [0,0,0,0,0]
              series['fin']['plan'] = [0,0,0,0,0]
              series['pcs']['plan'] = [0,0,0,0,0]
              $.each(weeks_group_plan, function(gi, week_data){

                  $.each(week_data, function(i,val){

                     series['m2']['plan'][gi] = (series['m2']['plan'][gi]==null ? val.square : series['m2']['plan'][gi]+val.square)
                     series['fin']['plan'][gi] = (series['fin']['plan'][gi]==null ? val.order_sum : series['fin']['plan'][gi]+val.order_sum)
                     series['pcs']['plan'][gi] = (series['pcs']['plan'][gi]==null ? 0 : series['pcs']['plan'][gi]+1)

                  })
              })
              series['m2']['fact'] = [0,0,0,0,0]
              series['fin']['fact'] = [0,0,0,0,0]
              series['pcs']['fact'] = [0,0,0,0,0]
              $.each(weeks_group_fact, function(gi, week_data){

                  $.each(week_data, function(i,val){

                      series['m2']['fact'][gi] = (series['m2']['fact'][gi]==null ? 0 : series['m2']['fact'][gi]+val.square)
                      series['fin']['fact'][gi] = (series['fin']['fact'][gi]==null ? 0 : series['fin']['fact'][gi]+val.order_sum)
                      series['pcs']['fact'][gi] = (series['pcs']['fact'][gi]==null ? 0 : series['pcs']['fact'][gi]+1)
                  })
              })


              return series;
          }
          redrawPlanFactChart();

      });
  </script>
</div>